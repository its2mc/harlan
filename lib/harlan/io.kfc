(module

  (import ffi)
  
  (extern fopen (str str) -> (ptr FILE))
  (extern fclose ((ptr FILE)) -> int)
  (extern fread ((ptr void) size_t size_t (ptr FILE)) -> size_t)
  (extern hscanf ((ptr FILE) str (ptr int)) -> int)
  (extern hscanf-float ((ptr FILE) str (ptr float)) -> int)
  (extern hscanfu64 ((ptr FILE) (ptr u64)) -> int)
  (extern hgets ((ptr FILE)) -> str)
  (extern file-read-line ((ptr FILE)) -> str)
  
  (define (file-open name)
    (fopen name "r"))

  (define (file-close f)
    (fclose f)
    #f)

  (define-macro define-read-binary ()
    ((_ name type init size)
     (define (name f)
       (let ((tmp (vector init)))
         (fread (unsafe-explicit-cast ((ptr type) -> (ptr void))
                                      (unsafe-vec-ptr tmp))
                (unsafe-explicit-cast (int -> size_t) size)
                (unsafe-explicit-cast (int -> size_t) 1) ;; 1 item
                f)
         (vector-ref tmp 0)))))

  (define-read-binary read-binary-float float 0.0 4)
  (define-read-binary read-binary-u32 int 0 4)
  (define-read-binary read-binary-u16 int 0 2)
  (define-read-binary read-binary-char char 0 1)
  
  ;;(define (file-read-binary-float f)
  ;;  (let ((tmp (vector 0.0)))
  ;;    (fread (unsafe-explicit-cast ((ptr float) -> (ptr void))
  ;;                                 (unsafe-vec-ptr tmp))
  ;;           4 ;; 4 bytes per float
  ;;           1 ;; 1 item
  ;;           f)
  ;;    (vector-ref tmp 0)))
  
  (define (file-read-int f)
    (let ((tmp (vector 0)))
      (hscanf f "%d" (unsafe-vec-ptr tmp))
      (vector-ref tmp 0)))

  (define (file-read-float f)
    (let ((tmp (vector 0)))
      (hscanf-float f "%f" (unsafe-vec-ptr tmp))
      (vector-ref tmp 0)))

  (define (file-read-string f)
    (hgets f))
  
  (define (file-read-u64 f)
    (let ((tmp (vector 0)))
      (hscanfu64 f (unsafe-vec-ptr tmp))
      (vector-ref tmp 0))))
