(module
  (define (map_add1 X)
    (kernel ((x X)) (+ x 1)))
  (define (main)
    (let ((X (vector 1)))
      (let ((Y (map_add1 X))
            (Z (map_add1 X)))
        (assert (= Y Z))))
    (let ((M (vector 1 2 3 4)))
      (let ((N (map_add1 M)))
        (assert (= (vector-ref N 0)
                   (+ (vector-ref M 0) 1)))))
    0))
