;; CSS Selector Matching
;;
;; Inspired by
;; http://www.eecs.berkeley.edu/~lmeyerov/projects/pbrowser/pubfiles/playout.pdf

(%testspec
  (%tags xfail))

(module

  ;; We represent tags as integers, assuming they are interned strings.

  ;; TODO: symbols are tags and also attributes like classes.
  
  (define-datatype CssSelector
    ;; Match a single tag
    (Symbol int)
    ;; Match a selector followed by another selector.
    (Sequence CssSelector CssSelector)
    ;; Match a selector, followed by a wildcard, followed by a selector.
    (Wildcard CssSelector CssSelector))

  (define-datatype CssRule
    (Selector CssSelector)
    (Alternate CssRule CssSelector))

  (define-datatype DomNode
    ;; Nodes are always a tag and a vector of child nodes.
    (Node int (vec DomNode)))

  ;; A linked list of nodes
  (define-datatype NodeList
    (DomItem DomNode NodeList)
    (EmptyList))

  (define (append-nodes list1 list2)
    (match list1
      ((DomItem node tail)
       (DomItem node (append-nodes tail list2)))
      ((EmptyList) list2)))
  
  (define (matches-selector? (Node tag children) selector path matches-rest?)
    (match selector
      ((Symbol tag^) (= tag tag^))
      ((Sequence s1 s2)
       ;; TODO: test s1 and if it matches, test the remainder on
       ;; s2. This means we'll need some way to return the part of the
       ;; node that wasn't consumed in matching s1.
       #f)
      ((Wildcard s1 s2)
       ;; This will be like the previous one, but if s1 matches we'll
       ;; have to see if any subtree of the remainder matches s2.
       #f)))
  
  (define (matches? (Node tag children) rule path)
    (match rule
      ((Selector selector)
       (matches-selector? (Node tag children) selector path (lambda (node) #t)))
      ((Alternate rule selector)
       (or (matches? (Node tag children) rule path)
           (matches-selector? (Node tag children)
                              selector
                              path
                              (lambda (node) #t))))))

  (define (leaf-node tag)
    (Node tag (vector)))

  ;; Traverses the whole tree, finding all nodes that match the given rule.
  (define (find-all-matches node rule path)
    (match node
      ((Node tag children)
       (let* ((path^ (DomItem node path))
              (child-matches (reduce append-nodes
                               (kernel ((child children))
                                 (find-all-matches child rule path^)))))
         (if (matches? node rule path)
             (DomItem node child-matches)
             child-matches)))))
  
  (define (main)
    (let ((selector1 (Selector (Symbol 0)))
          (node1 (leaf-node 0))
          (selector2 (Selector (Sequence (Symbol 0)
                                         (Symbol 1))))
          (node2 (Node 0 (vector (leaf-node 1)))))
      (println (matches? node1 selector1 (EmptyList)))
      (println (matches? node2 selector2 (EmptyList))))
    0))
