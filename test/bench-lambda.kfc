(%testspec
 (%tags bench))

(module

  (extern time-s () -> float)

  (define-datatype Expr
    (variable int)
    (Lambda Expr)
    (app Expr Expr))

  (define-datatype Value
    (error)
    (closure Expr Env))

  (define-datatype Env
    (empty-env)
    (extended-env Value Env))

  (define-datatype Cont
    (final-k)
    (rator-k Expr Env Cont)
    (rand-k Value Cont))

  (define-datatype Thunk
    (final-t Value)
    (value-of-t Expr Env Cont)
    (apply-k-t Cont Value)
    (lookup-t int Env Cont))
  
  (define (apply-k k v)
    (match k
      ((final-k) (final-t v))
      ((rator-k e env k)
       (value-of-t e env (rand-k v k)))
      ((rand-k f k)
       (match f
         ((error) (apply-k-t k (error)))
         ((closure e env)
          (value-of-t e (extended-env v env) k))))))
  
  
  (define (lookup x e k)
    (match e
      ((empty-env) (final-t (error)))
      ((extended-env v e)
       (if (= 0 x)
           (apply-k-t k v)
           (lookup-t (- x 1) e k)))))
  
  (define (value-of e env k)
    (match e
      ((variable x) (lookup-t x env k))
      ((Lambda b) (apply-k-t k (closure b env)))
      ((app e1 e2)
       (value-of-t e1 env
                 (rator-k e2 env k)))))

  (define (apply-thunk t)
    (match t
      ((final-t v) (final-t v))
      ((value-of-t e env k) (value-of e env k))
      ((apply-k-t k v) (apply-k k v))
      ((lookup-t x env k) (lookup x env k))))
  
  (define (print-val v)
    (match v
      ((error) (print "(error)") 0)
      ((closure b e)
       (print "(closure ")
       ;;(print-expr b)
       ;;(print " ")
       ;;(print-env e)
       (print " ...")
       (print ")")
       0)))

  (define (eval-many exprs steps)
    (kernel ((e exprs))
      (let ((e e))
        (for (_ 0 steps)
          (set! e (apply-thunk e)))
        e)))
  
  (define (bench-step count)
    (let* ((Omega (app (lambda (app (variable 0) (variable 0)))
                       (lambda (app (variable 0) (variable 0)))))
	   (exprs (kernel ((_ (iota count)))
		    (value-of-t Omega (empty-env) (final-k))))
	   (start (time-s))
	   (_ (eval-many exprs 150))
	   (stop (time-s)))
      (- stop start)))

  (define (main)
    (for (i 500 10001 500)
      (let ((total 0.0))
	(for (_ 0 10)
	  (set! total (+ total (bench-step i))))
	(print i)
	(print "\t")
	(println (/ total 10))))
    0)
  )
