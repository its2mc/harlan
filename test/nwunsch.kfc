(%testspec (%tags xfail))

(module
  (define (makeScore X Y)
    (kernel ((x (iota X)))
      (kernel ((y (iota Y)))
        (if (= x 0) (* y -1)
            (if (= y 0) (* x -1)
                0)))))

  (define (calcDiag score startX startY strA strB)
    (kernel ((x score) (i (iota (length score))))
      (kernel ((y x) (j (iota (length x))))
        (if (= i (- startX (- j 1)))
            (if (= j (+ startY (- j 1)))
                (let ((tmpMax (vector-ref (vector-ref score (- i 1)) j)))
                  (if (< tmpMax (vector-ref (vector-ref score i) j))
                      (set! tmpMax (vector-ref (vector-ref score i) j)))
                  (if (< tmpMax (vector-ref (vector-ref score i) (- j 1)))
                      (set! tmpMax (vector-ref (vector-ref score i) (- j 1))))
                  (if (= (vector-ref strA i) (vector-ref strB i))
                      (+ tmpMax 2)
                      (- tmpMax 2)))
                y)
            y))))

  (define (main)
    (let ((strA (vector 1 2 3 4))
          (strB (vector 1 2 1 4)))
      (let ((score (makeScore (+ 1 (length strA)) (+ 1 (length strB)))))
        (print score)
        (for (i 1 5)
          (set! score (calcDiag score i 1 strA strB)))
        (print score)
        ;;(for (i 1 5)))
        ;;	(let ((score (calcDiag2 score i))))
        ;;)
        ;;(for (i 0 (length strA))
        ;;	(for (j 0 (length strB))
        ;;		(print (vector-ref (vector-ref score i) j))
        ;;(assert (= (vector-ref (vector-ref score i) j) 0))
        ;;	)
        ;;)
        ))
    0))
