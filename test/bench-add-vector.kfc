;; Vector sum

(%testspec
 (%tags bench))

(module
  (extern time-s () -> float)

  (define (add-vectors xs ys)
    (kernel ((x xs) (y ys)) (+ x y)))
  
  (define (bench_length len)
    (let ((xs (make-vector len 1.0))
          (ys (make-vector len 1.0)))
      ; (println* "Created vectors: lengths " (length xs) " " (length ys))
      (let* ((start (nanotime))
             (sum (add-vectors xs ys))
             ;;(sum (kernel ((x xs) (y ys)) (+ x y)))
             (stop (nanotime)))
		(- stop start))))
    
  (define (main)
;;    (for (i 30 31)
    
    ;; From 1M to 90M elements:
;    (for (i 1 90 2)
;;    (for (i 1 17)
	  ; (let ((time 0)
          ;       (globalstart (nanotime)))
          ;       ;; Add each vector 10 times:
	  ;       (for (j 0 10)
	  ;         (set! time (+ time (bench_length (* i 1000000)))))
          ;       (println* "ARG_AND_SELFTIMED: " i "\t" (/ (u64->float (/ time 1000)) 1e7))
          ;       (println* "  total test time, ten rounds, with transfers: " (/ (u64->float (/ (- (nanotime) globalstart) 1000)) 1e6))
          ; )
;    ))

    ;; Command line arg is size in millions of elements
    (let* ((args (command-line))
           (size (if (> (length args) 1)
                     (parse-str->int (vector-ref args 1) -99) 10))
           (time 0))
      (println* "Running benchmark for size " size ", command line args were: " args)
      (set! time (bench_length (* size 1000000)))
      (println* "\nSELFTIMED: " (/ (u64->float (/ time 1000)) 1e7))
      )

    0))
