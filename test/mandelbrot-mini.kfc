(module
  (define (main)
    (let ((i 0)
          (j 0))
      (let ((cr (- (/ (int->float i) 512.0) 1.0))
            (ci (- (/ (int->float j) 512.0) 1.0))
            (xr 0.0)
            (xi 0.0)
            (idx 0)
            (escape 0))
        (while (< idx 256)
          (let ((xrp (+ (- (* xr xr) (* xi xi)) cr))
                (xip (+ (* 2.0 (* xr xi)) ci)))
            (set! xr xrp)
            (set! xi xip)
            (let ((m (+ (* xr xr) (* xi xi))))
              (if (< m 4.0)
                  (set! escape idx)))
            (set! idx (+ idx 1))))
        0))))
