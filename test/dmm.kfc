;; Dense matrix-matrix product

(module
  (define (main)
    (let ((A (vector
               (vector 1 0 0 0)
               (vector 0 1 0 0)
               (vector 0 0 1 0)
               (vector 0 0 0 1)))
          (B (vector
              (vector 1 0 0 0)
              (vector 0 1 0 0)
              (vector 0 0 1 0)
              (vector 0 0 0 1))))
      (let ((Bt (kernel ((j (iota 4)))
                  (kernel ((i (iota 4)))
                    (vector-ref (vector-ref B j) i)))))
        (assert (= Bt A))
        (let ((C (kernel ((row A))
                   (kernel ((col Bt))
                     (reduce +
                       (kernel ((x row) (y col))
                         (* x y)))))))
          (assert (= C A))
          0)))))
