(module

  (define-datatype Expr
    (variable int)
    (Lambda Expr)
    (app Expr Expr))

  (define-datatype Value
    (error)
    (closure Expr Env))

  (define-datatype Env
    (empty-env)
    (extended-env Value Env))

  (define-datatype Cont
    (final-k)
    (rator-k Expr Env Cont)
    (rand-k Value Cont))

  (define-datatype Thunk
    (final-t Value)
    (value-of-t Expr Env Cont)
    (apply-k-t Cont Value)
    (lookup-t int Env Cont))
  
  (define (apply-k k v)
    (match k
      ((final-k) (final-t v))
      ((rator-k e env k)
       (value-of-t e env (rand-k v k)))
      ((rand-k f k)
       (match f
         ((error) (apply-k-t k (error)))
         ((closure e env)
          (value-of-t e (extended-env v env) k))))))
  
  
  (define (lookup x e k)
    (match e
      ((empty-env) (final-t (error)))
      ((extended-env v e)
       (if (= 0 x)
           (apply-k-t k v)
           (lookup-t (- x 1) e k)))))
  
  (define (value-of e env k)
    (match e
      ((variable x) (lookup-t x env k))
      ((Lambda b) (apply-k-t k (closure b env)))
      ((app e1 e2)
       (value-of-t e1 env
                 (rator-k e2 env k)))))

  (define (apply-thunk t)
    (match t
      ((final-t v) (final-t v))
      ((value-of-t e env k) (value-of e env k))
      ((apply-k-t k v) (apply-k k v))
      ((lookup-t x env k) (lookup x env k))))
  
  (define (print-val v)
    (match v
      ((error) (print "(error)") 0)
      ((closure b e)
       (print "(closure ")
       ;;(print-expr b)
       ;;(print " ")
       ;;(print-env e)
       (print " ...")
       (print ")")
       0)))

  (define-macro on-gpu ()
    ((_ e)
     (vector-ref (kernel ((xxx (vector 0))) e) 0)))

  ;; Weird, gpu-apply works, but (on-gpu (apply-thunk t)) causes a
  ;; segmentation fault. Need to file bug.
  (define-macro gpu-apply ()
    ((_ f e)
     (vector-ref (kernel ((xxx (vector e))) (f xxx)) 0)))
  
  (define (eval t)
    (match t
      ((final-t v) v)
      ((value-of-t e env k) (eval (gpu-apply apply-thunk t)))
      ((apply-k-t k v) (eval (gpu-apply apply-thunk t)))
      ((lookup-t x env k) (eval (gpu-apply apply-thunk t)))))
  
  (define (main)
    (let* ((e (app (Lambda (variable 0)) (Lambda (variable 0))))
           (v (eval (value-of-t e (empty-env) (final-k)))))
      (print-val v)
      (println ""))
    0)
  )
