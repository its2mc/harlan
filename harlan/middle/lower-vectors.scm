(library
  (harlan middle lower-vectors)
  (export lower-vectors)
  (import
    (rnrs)
    (harlan helpers)
    (except (elegant-weapons helpers) ident?))

(define-match lower-vectors
  ((module ,[lower-decl -> decl*] ...)
   `(module . ,decl*)))

(define-match lower-decl
  ((fn ,name ,info ... ,[lower-stmt -> s])
   `(fn ,name ,info ... ,s))
  ((typedef ,name ,t) `(typedef ,name ,t))
  ((extern ,name ,args -> ,t)
   `(extern ,name ,args -> ,t)))

(define-match lower-stmt
  ((error ,x) `(error ,x))
  ((let ,b ,[s])
   (lower-lifted-expr b s))
  ((let-region (,r ...) ,[s]) `(let-region (,r ...) ,s))
  ((begin ,[stmt*] ...)
   (make-begin stmt*))
  ((if ,t ,[c])
   `(if ,t ,c))
  ((if ,t ,[c] ,[a])
   `(if ,t ,c ,a))
  ((while ,e ,[s])
   `(while ,e ,s))
  ((for (,i ,start ,end ,step) ,[stmt])
   `(for (,i ,start ,end ,step) ,stmt))
  ((set! ,lhs ,rhs)
   `(set! ,lhs ,rhs))
  ((label ,lbl) `(label ,lbl))
  ((goto ,lbl) `(goto ,lbl))
  ((return)
   `(return))
  ((return ,e)
   `(return ,e))
  ((assert ,e)
   `(assert ,e))
  ((print ,e* ...)
   `(print . ,e*))
  ((kernel ,t (,dims ...) (danger: . ,dng) ,fv* ,[stmt])
   `(kernel ,t ,dims (danger: . ,dng) ,fv* ,stmt))
  ((do ,e) `(do ,e)))

(define (lower-lifted-expr b s)
  (match b
    (() s)
    (((,x (vec ,r ,t) (vector (vec ,r ,t) ,r . ,e*)) . ,[rest])
     `(let ((,x (vec ,r ,t)
                (make-vector ,t ,r (int ,(length e*)))))
        (begin
          ,@(let loop ((e* e*) (i 0))
              (if (null? e*)
                  `()
                  `((set! (vector-ref ,t
                                      (var (vec ,r ,t) ,x)
                                      (int ,i))
                          ,(car e*))
                    . ,(loop (cdr e*) (+ 1 i)))))
          ,rest)))
    (((,x ,_ (box ,r ,t ,e)) . ,[rest])
     `(let ((,x region_ptr (box ,r ,t)))
        (begin (set! (unbox ,t ,r (var region_ptr ,x)) ,e)
               ,rest)))
    (((,x ,t ,e) . ,[rest])
     ;;(display `((,x ,t ,e) ,rest)) (newline)
     ;;(display (car e)) (newline)
     (assert (not (and (pair? e) (or (eq? (car e) 'vector)
                                     (eq? (car e) 'box)))))
     `(let ((,x ,t ,e)) ,rest))
    (((,x ,t) . ,[rest])
     `(let ((,x ,t)) ,rest))))

)
